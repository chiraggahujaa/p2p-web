# This workflow automatically deploys main branch to production every day at 9 PM UTC:
# 1. ✅ Checks if main is ahead of production (prevents rollbacks)
# 2. ✅ Safely merges main into production with conflict detection
# 3. ✅ Verifies the deployment was successful
# 4. ✅ Provides detailed notifications for success/failure/skip scenarios
# 5. ✅ Supports manual triggering with force deployment option

# Schedule: Daily at 9:00 PM UTC (adjust cron expression for your timezone)
# Manual trigger: Available via GitHub Actions UI with force deployment option
# Safety features: Prevents rollbacks, detects conflicts
# Note: Quality checks are handled by your existing production push workflow

name: Daily Production Deploy

on:
  schedule:
    # Run every day at 9:00 PM UTC (adjust timezone as needed)
    - cron: '0 21 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_deploy:
        description: 'Force deployment even if main is behind production'
        required: false
        default: false
        type: boolean

# Add these permissions at the workflow level
permissions:
  contents: write        # To push to branches
  pull-requests: write   # To create/update PRs if needed
  actions: read         # To read workflow status
  checks: read          # To read status checks

env:
  NODE_VERSION: '20'

jobs:
  # ==========================================
  # DEPLOYMENT TO PRODUCTION
  # ==========================================
  
  deploy-to-production:
    name: 'Deploy Main to Production'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Check if deployment is needed
        id: check
        run: |
          # Get current branch info
          MAIN_COMMIT=$(git rev-parse origin/main)
          
          # Check if production branch exists
          if git show-ref --verify --quiet refs/remotes/origin/production; then
            PRODUCTION_COMMIT=$(git rev-parse origin/production)
            echo "production-exists=true" >> $GITHUB_OUTPUT
          else
            PRODUCTION_COMMIT="none"
            echo "production-exists=false" >> $GITHUB_OUTPUT
            echo "ℹ️  Production branch doesn't exist. Will create it."
          fi
          
          echo "main-commit=$MAIN_COMMIT" >> $GITHUB_OUTPUT
          echo "production-commit=$PRODUCTION_COMMIT" >> $GITHUB_OUTPUT
          
          # Check if main is ahead of production
          if [ "$PRODUCTION_COMMIT" = "none" ]; then
            echo "✅ Production branch doesn't exist. Deployment needed."
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif git merge-base --is-ancestor origin/production origin/main; then
            if [ "$MAIN_COMMIT" = "$PRODUCTION_COMMIT" ]; then
              echo "ℹ️  Main and production are at the same commit. No deployment needed."
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            else
              echo "✅ Main is ahead of production. Deployment needed."
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            fi
          else
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "⚠️  Production is ahead of main, but force deployment is enabled."
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Production is ahead of main. Skipping deployment to prevent rollback."
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Merge main into production
        id: merge
        if: steps.check.outputs.should-deploy == 'true'
        run: |
          echo "🚀 Starting deployment from main to production..."
          
          # Switch to production branch
          git checkout production
          git pull origin production
          
          # Try fast-forward merge first (preferred method)
          if git merge origin/main --ff-only; then
            echo "✅ Fast-forward merge successful"
          else
            echo "⚠️ Fast-forward merge not possible, using rebase strategy..."
            
            # Reset to main (this creates linear history)
            git reset --hard origin/main
            
            # Create a deployment commit
            git commit --allow-empty -m "🤖 Automated deployment: Update production to main - Source: main (${{ steps.check.outputs.main-commit }}) - Target: production (${{ steps.check.outputs.production-commit }}) - Triggered by: ${{ github.event_name }} - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC') - This deployment was automatically triggered by the scheduled workflow."
            
            echo "✅ Production branch updated to match main with deployment commit"
          fi
          
          # Push to production branch
          git push origin production --force
          
          echo "✅ Successfully merged main into production"
          echo "deployment-commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Verify deployment
        if: steps.check.outputs.should-deploy == 'true'
        run: |
          echo "🔍 Verifying deployment..."
          
          # Wait a moment for Vercel to detect the push
          sleep 10
          
          # Check if production branch was updated
          PRODUCTION_LATEST=$(git rev-parse origin/production)
          if [ "$PRODUCTION_LATEST" = "${{ steps.merge.outputs.deployment-commit }}" ]; then
            echo "✅ Production branch successfully updated"
            echo "🚀 Vercel should now be deploying the new version"
          else
            echo "❌ Production branch update verification failed"
            exit 1
          fi

  # ==========================================
  # NOTIFICATIONS
  # ==========================================
  
  notify-success:
    name: 'Notify Deployment Success'
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: always() && needs.deploy-to-production.result == 'success'
    
    steps:
      - name: Success notification
        run: |
          echo "🎉 Scheduled deployment completed successfully!"
          echo "📊 Deployment Summary:"
          echo "  - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Status: ✅ Success"
          echo ""
          echo "🚀 Vercel should now be deploying the new version to production."

  notify-skipped:
    name: 'Notify Deployment Skipped'
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: always() && needs.deploy-to-production.result == 'skipped'
    
    steps:
      - name: Skipped notification
        run: |
          echo "⏭️  Scheduled deployment skipped"
          echo "📊 Deployment Summary:"
          echo "  - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Status: ⏭️  Skipped (no new changes or production ahead)"
          echo ""
          echo "ℹ️  No deployment was needed at this time."

  notify-failure:
    name: 'Notify Deployment Failure'
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: always() && needs.deploy-to-production.result == 'failure'
    
    steps:
      - name: Failure notification
        run: |
          echo "❌ Scheduled deployment failed!"
          echo "📊 Deployment Summary:"
          echo "  - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Status: ❌ Failed"
          echo ""
          echo "🔍 Please check the workflow logs for details."
          echo "💡 You may need to resolve merge conflicts manually."

  # ==========================================
  # WORKFLOW SUMMARY
  # ==========================================
  
  workflow-summary:
    name: 'Workflow Summary'
    runs-on: ubuntu-latest
    needs: [deploy-to-production, notify-success, notify-skipped, notify-failure]
    if: always()
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "# 📋 Daily Production Deploy - Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🕘 Execution Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Target:** Deploy main branch → production branch → Vercel" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [ "${{ needs.deploy-to-production.result }}" == "success" ]; then
            echo "## ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- Main branch successfully deployed to production" >> $GITHUB_STEP_SUMMARY
            echo "- Vercel deployment should be triggered automatically" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-to-production.result }}" == "skipped" ]; then
            echo "## ⏭️ Deployment Status: SKIPPED" >> $GITHUB_STEP_SUMMARY
            echo "- No new changes detected between main and production" >> $GITHUB_STEP_SUMMARY
            echo "- No deployment was necessary" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-to-production.result }}" == "failure" ]; then
            echo "## ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment encountered an error" >> $GITHUB_STEP_SUMMARY
            echo "- Please check the logs for details" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Deployment Status: UNKNOWN" >> $GITHUB_STEP_SUMMARY
            echo "- Unexpected deployment result" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Vercel Dashboard](https://vercel.com/dashboard)" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Branch](https://github.com/${{ github.repository }}/tree/production)" >> $GITHUB_STEP_SUMMARY
          echo "- [Main Branch](https://github.com/${{ github.repository }}/tree/main)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*🤖 Automated daily deployment at 9:00 PM UTC*" >> $GITHUB_STEP_SUMMARY
